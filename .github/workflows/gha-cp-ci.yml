#---------------------------------------------------------------------
# GitHub Action Workflow for Cloud-Pipeline
# Version 1.1
# 2022
#---------------------------------------------------------------------

name: gha-cp-ci

# Controls when the workflow will run
on:
  push:
    branches: 
    - 'develop'
    - 'release/**'
    paths-ignore:
      #- ".github/workflows/**"
      - ".README.md"
      - ".gitignore"
      - "quick-launcher/**"
  pull_request:
    branches: 
      - '**'
    paths-ignore:
      #- ".github/workflows/**"
      - ".README.md"
      - ".gitignore"
      - "quick-launcher/**"
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

#  build_macos:
#    runs-on: macos-latest
#    steps:
#
#    - uses: actions/checkout@v3
#
#    - name: Setup Java JDK
#      uses: actions/setup-java@v3
#      with:
#        distribution: "temurin" # See 'Supported distributions' for available options
#        java-version: "8"
#        cache: "gradle"
#
#    - uses: actions/setup-node@v3
#      with:
#        node-version: 10
#
#    - name: Configure AWS Credentials
#      #if: ${{ github.event_name == 'push' && github.ref_name == 'develop' }}
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
#
#    - name: Python Setup Action
#      uses: actions/setup-python@v4
#      with:
#        python-version: '2.7'
#
#    - name: Setup Gradle
#      uses: gradle/gradle-build-action@v2    
#    - run: ./gradlew -PbuildNumber=${{ github.run_number }}.${{ github.sha }} -Pprofile=release pipe-cli:buildMac --no-daemon -x :pipe-cli:test
#
#    - run: tar -zcf pipe-osx-full.${{ github.run_number }}.tar.gz pipe-cli/dist
#
#    - name: Upload a build artifact on the GitHub Actions job page
#      uses: actions/upload-artifact@v3
#      with:
#        name: pipe-osx-full.${{ github.run_number }}.tar.gz
#        path: pipe-osx-full.${{ github.run_number }}.tar.gz
#        retention-days: 7 
  
  pack_dist:
    #needs: build_macos
    env:
      API_STATIC_PATH: api/src/main/resources/static
      #_OSX_CLI_TAR_NAME: pipe-osx-full.${{ github.run_number }}.tar.gz
      _OSX_CLI_TAR_NAME: pipe-osx-full.6.tar.gz
      #_OSX_CLI_PATH: $(mktemp -d)
      _OSX_CLI_PATH: assemble
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Java JDK
      uses: actions/setup-java@v3
      with:
        distribution: "temurin" # See 'Supported distributions' for available options
        java-version: "8"
        cache: "gradle"

    # - name: Setup Gradle
    #   uses: gradle/gradle-build-action@v2

    - name: Setup Python 2.7 
      uses: actions/setup-python@v4
      with:
        python-version: '2.7'
    - run: python2 -m pip install mkdocs

    - name: Setup Node.js 10 
      uses: actions/setup-node@v3
      with:
        node-version: 10
    
    - name: Configure AWS Credentials
      #if: ${{ github.event_name == 'push' && github.ref_name == 'develop' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    
#    - uses: actions/download-artifact@v3
#      with:
#        name: pipe-osx-full.${{ github.run_number }}.tar.gz
#    - name: Display structure of downloaded files
#      run: ls -R

    - name: File layout 1
      run: |
        mkdir $_OSX_CLI_PATH
        rm -rf $API_STATIC_PATH/*
        rm -rf build/install/dist/*
        mkdir -p $API_STATIC_PATH
        aws s3 cp s3://cloud-pipeline-oss-test/temp/$_OSX_CLI_TAR_NAME $_OSX_CLI_PATH/
        #mv $_OSX_CLI_TAR_NAME $_OSX_CLI_PATH/
        tar -zxf $_OSX_CLI_PATH/$_OSX_CLI_TAR_NAME -C $_OSX_CLI_PATH
        #mv $_OSX_CLI_PATH/pipe-cli/dist/dist-file/pipe-osx $API_STATIC_PATH/pipe-osx
        #mv $_OSX_CLI_PATH/pipe-cli/dist/dist-folder/pipe-osx.tar.gz $API_STATIC_PATH/pipe-osx.tar.gz 
        mv $_OSX_CLI_PATH/dist/dist-file/pipe-osx $API_STATIC_PATH/pipe-osx
        mv $_OSX_CLI_PATH/dist/dist-folder/pipe-osx.tar.gz $API_STATIC_PATH/pipe-osx.tar.gz

    - name: Gradle pipe-cli:buildLinux
      run: _BUILD_DOCKER_IMAGE="${CP_DOCKER_DIST_SRV}lifescience/cloud-pipeline:python2.7-centos6" ./gradlew -PbuildNumber=${{ github.run_number }}.${{ github.sha }} -Pprofile=release pipe-cli:buildLinux --no-daemon -x :pipe-cli:test

    - name: Fixing permissions
      run: sudo chown -R $USER:$USER ${{ github.workspace }}

    - name: File layout 2
      run: | 
        mv pipe-cli/dist/dist-file/pipe $API_STATIC_PATH/pipe-el6
        mv pipe-cli/dist/dist-folder/pipe.tar.gz $API_STATIC_PATH/pipe-el6.tar.gz

    # - name: Gradle pipe-cli:buildWin
    #   run: ./gradlew -PbuildNumber=${{ github.run_number }}.${{ github.sha }} -Pprofile=release -x test pipe-cli:buildWin --no-daemon

    # - name: Gradle distTar
    #   run: ./gradlew distTar -PbuildNumber=${{ github.run_number }}.${{ github.sha }} -Pprofile=release -x test -Pfast --no-daemon -x pipe-cli:buildLinux -x pipe-cli:buildWin
    
    - run: sudo ls -R

    - name: Copying a build artifact to AWS
      #if: ${{ github.event_name == 'push' && github.ref_name == 'develop' }}
      run: aws s3 cp build/install/dist/cloud-pipeline* s3://cloud-pipeline-oss-test/builds/$GITHUB_REF_NAME/
      shell: bash
      env:
        DIST_TGZ_NAME: $(echo build/install/dist/cloud-pipeline*)
