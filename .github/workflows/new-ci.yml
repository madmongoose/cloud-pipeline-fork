# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: cppl-ci

# Controls when the workflow will run
on:
  push:
    branches: 
    - 'develop'
    - 'release/**'
    paths-ignore:
      #- ".github/workflows/**"
      - ".README.md"
      - ".gitignore"
      - "quick-launcher/**"
  pull_request:
    branches: 
      - '**'
    paths-ignore:
      #- ".github/workflows/**"
      - ".README.md"
      - ".gitignore"
      - "quick-launcher/**"
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
      
  build2:
    
    runs-on: ubuntu-latest
    #runs-on: ${{ matrix.os }}
    #needs: build1
    #strategy:
      #matrix:
        #os: [macos-latest, ubuntu-latest]
        #os: [macos-latest]
        #node: [10]
        #java: [8]
    steps:
    - uses: actions/checkout@v2
    - name: Setup Java JDK
      uses: actions/setup-java@v2
      with:
        distribution: "temurin" # See 'Supported distributions' for available options
        java-version: "8"
        cache: "gradle"
    - uses: actions/setup-node@v3
      with:
        node-version: 10
    - run: npm install
    - name: Configure AWS Credentials
      #if: ${{ github.event_name == 'push' && github.ref_name == 'develop' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    #- name: Set the correct Node version using nvm
      #shell: bash -l {0} 
      #run: nvm install
    #- name: Install Dependencies
      #run: npm install
    #- run: npm install -g npm
    # - name: Install dependencies
    #   run: pip install wheel
    - name: Python Setup Action
      uses: actions/setup-python@v4
      with:
        python-version: '2.7'
    # - name: Install Dependencies
    #   run: npm install
    # - run: npm install -g npm
    - run: pip install awscli==1.14.56 mkdocs
    - run: rm -rf api/src/main/resources/static/*
    - run: rm -rf build/install/dist/*
    - run: mkdir -p api/src/main/resources/static
    - run: mkdir test
    - run: aws s3 cp s3://cloud-pipeline-oss-test/temp/pipe-osx-full.6.tar.gz test
    - run: tar -zxf test/pipe-osx-full.6.tar.gz -C test
    - run: mv test/dist/dist-file/pipe-osx api/src/main/resources/static/pipe-osx
    - run: mv test/dist/dist-folder/pipe-osx.tar.gz api/src/main/resources/static/pipe-osx.tar.gz
    - run: _BUILD_DOCKER_IMAGE="lifescience/cloud-pipeline:python2.7-centos6" ./gradlew -PbuildNumber=$GITHUB_RUN_NUMBER.$GITHUB_SHA -Pprofile=release pipe-cli:buildLinux --no-daemon -x :pipe-cli:test
    - run: sudo mv pipe-cli/dist/dist-file/pipe api/src/main/resources/static/pipe-el6
    - run: sudo mv pipe-cli/dist/dist-folder/pipe.tar.gz api/src/main/resources/static/pipe-el6.tar.gz
  
  build3:  
    runs-on: ubuntu-latest
    needs: build2
    container:
      image: lifescience/cloud-pipeline:python2.7-centos6
      options: --user root
    steps:
      
      - uses: actions/checkout@v2
      - name: Setup Java JDK
        uses: actions/setup-java@v2
        with:
          distribution: "temurin" # See 'Supported distributions' for available options
          java-version: "8"
          cache: "gradle"
      - uses: actions/setup-node@v3
        with:
          node-version: 10
      - run: npm install
      - name: Python Setup Action
        uses: actions/setup-python@v4
        with:
          python-version: '2.7'
      - name: Build GRADLE1
        uses: gradle/gradle-build-action@v2
        with:
          arguments: distTar -PbuildNumber=${{ github.sha }} -Pprofile=release -x test -Pfast --no-daemon --info
